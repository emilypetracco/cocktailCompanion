{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","drink","setDrink","id","setId","useEffect","finalUrl","URL","finalSearchParams","URLSearchParams","i","search","fetch","then","response","json","finalDrink","console","log","className","onClick","event","preventDefault","url","searchParams","c","cache","drinks","idDrinkArray","map","res","push","idDrink","Math","floor","random","length","src","strDrinkThumb","strDrink","strMeasure1","strIngredient1","strMeasure2","strIngredient2","strMeasure3","strIngredient3","strMeasure4","strIngredient4","strMeasure5","strIngredient5","strMeasure6","strIngredient6","strMeasure7","strIngredient7","strMeasure8","strIngredient8","strInstructions","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.065efa73.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react';\nimport { Fragment } from 'react';\n\n// component to handle choosing drink and rendering options\nfunction App() {\n  // SETTING INITIAL STATE:\n  // drink represents drink results\n  const [drink, setDrink] = useState([]);\n  // type represents cocktail or shot\n  const [type, setType] = useState('');\n  // id represents the drinkId\n  const [id, setId] = useState(0);\n\n  // GETTING AND SETTING DRINK ID:\n  // useEffect(\n  //   () => {\n  //     const url = new URL(`https://www.thecocktaildb.com/api/json/v1/1/filter.php`);\n  //     const searchParams = new URLSearchParams({\n  //       // type is set onClick (cocktail or shot button)\n  //       c: type,\n  //       cache: false\n  //     }\n  //     );\n  //     url.search = searchParams;\n  //     fetch(url)\n  //       .then((response) => {\n  //         return response.json();\n  //       })\n  //       .then((drinks) => {\n  //         let idDrinkArray = [];\n  //         drinks.drinks.map(res => {\n  //           idDrinkArray.push(res.idDrink);\n  //         });\n  //         const i = idDrinkArray[Math.floor(Math.random() * idDrinkArray.length)];\n  //         setId(i);\n  //       })\n  //   },\n  //   [type]\n  // );\n\n  // GETTING AND SETTING DRINKS BASED OFF OF ID\n  useEffect(\n    () => {\n      let array = [];\n      const finalUrl = new URL(`https://www.thecocktaildb.com/api/json/v1/1/lookup.php`);\n      const finalSearchParams = new URLSearchParams({\n        // type is set onClick (cocktail or shot button)\n        i: id\n      }\n      );\n      finalUrl.search = finalSearchParams;\n      fetch(finalUrl)\n        .then((response) => {\n          return response.json();\n        })\n        .then((finalDrink) => {\n          setDrink(finalDrink);\n        })\n    },\n    [id]\n  );\n\n  const setCocktail = (event) => {\n    event.preventDefault();\n    const url = new URL(`https://www.thecocktaildb.com/api/json/v1/1/filter.php`);\n    const searchParams = new URLSearchParams({\n      // type is set onClick (cocktail or shot button)\n      c: 'cocktail',\n      cache: false\n    }\n    );\n    url.search = searchParams;\n    fetch(url)\n      .then((response) => {\n        return response.json();\n      })\n      .then((drinks) => {\n        let idDrinkArray = [];\n        drinks.drinks.map(res => {\n          idDrinkArray.push(res.idDrink);\n        });\n        const i = idDrinkArray[Math.floor(Math.random() * idDrinkArray.length)];\n        setId(i);\n      })\n  }\n\n  const setShots = (event) => {\n    event.preventDefault();\n    const url = new URL(`https://www.thecocktaildb.com/api/json/v1/1/filter.php`);\n    const searchParams = new URLSearchParams({\n      // type is set onClick (cocktail or shot button)\n      c: 'shot',\n      cache: false\n    }\n    );\n    url.search = searchParams;\n    fetch(url)\n      .then((response) => {\n        return response.json();\n      })\n      .then((drinks) => {\n        let idDrinkArray = [];\n        drinks.drinks.map(res => {\n          idDrinkArray.push(res.idDrink);\n        });\n        const i = idDrinkArray[Math.floor(Math.random() * idDrinkArray.length)];\n        setId(i);\n      })\n  }\n\n  console.log('rerender');\n\n  return (\n    <Fragment>\n      <header>\n        <h1><span>The </span>Cocktail Companion</h1>\n      </header>\n      <main>\n        <h2>Pick Your Poison</h2>\n        <div className=\"drinkType\">\n          <form>\n            <button onClick={setCocktail}><i className=\"fas fa-cocktail\"></i> Cocktails</button>\n            <button onClick={setShots}><i className=\"fas fa-glass-whiskey\"></i> Shots</button>\n          </form>\n        </div>\n        {/* <div className=\"savedDrinks\">\n          <h3>Your Saved Drinks:</h3>\n        </div> */}\n        {\n          // rendering random drink\n          drink.drinks && drink.drinks.map(res => {\n            return (\n              <container className=\"drinksContainer\">\n                <div className=\"imageContainer\">\n                  <img src={res.strDrinkThumb} />\n                </div>\n                <div className=\"drinkInfomation\">\n                  <h4>{res.strDrink}</h4>\n                  <h5>Ingredients:</h5>\n                  <ul>\n                    <li>{res.strMeasure1} {res.strIngredient1}</li>\n                    <li>{res.strMeasure2} {res.strIngredient2}</li>\n                    <li>{res.strMeasure3} {res.strIngredient3}</li>\n                    <li>{res.strMeasure4} {res.strIngredient4}</li>\n                    <li>{res.strMeasure5} {res.strIngredient5}</li>\n                    <li>{res.strMeasure6} {res.strIngredient6}</li>\n                    <li>{res.strMeasure7} {res.strIngredient7}</li>\n                    <li>{res.strMeasure8} {res.strIngredient8}</li>\n                  </ul>\n                  <h5>Instructions:</h5>\n                  <p className=\"instructions\">{res.strInstructions}</p>\n                  {/* <button>save!</button> */}\n                </div>\n              </container>\n            )\n          })\n        }\n      </main>\n      <footer>\n        <p>Created at <a href=\"https://junocollege.com\">Juno College</a></p>\n      </footer>\n    </Fragment>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}